var util = require("../util.wxs")

var foo = 1;
var bar = 'Hello World';
var i;
x = 100;
// 这里是注释
var a = 10,
  b = 20;
//  + - * /
console.log("30 === a + b", 30 === a + b);
console.log("-10 === a - b", -10 === a - b);
util.clog("200 === a * b", 200 === a * b);
util.clog("0.5 === a / b", 0.5 === a / b);
util.clog("10 === a % b", 10 === a % b);
// 一元运算
console.log("10 === a++", 10 === a++);
console.log("12 === ++a", 10 === ++a);
console.log("12 === a--", 10 === a--);
console.log("10 === --a", 10 === --a);
console.log("0-10 === -a", 0 - 10 === -a);
console.log("10 === +a", 10 === +a);
console.log("-11 === ~a", -11 === ~a);
console.log("false === !a", false === !a);
console.log("true === delete a.fake", true === delete a.fake);
console.log("undefined === void a", undefined === void a);
console.log("'number' === typeof a", 'number' === typeof a);
// 位运算
console.log("80 === (a << 3)", 80 === (a << 3));
console.log("2 === (a >> 2)", 2 === (a >> 2));
console.log("2 === (a >>> 2)", 2 === (a >>> 2));
console.log("2 === (a & 3)", 2 === (a & 3));
console.log("9 === (a ^ 3)", 9 === (a ^ 3));
console.log("11 === (a | 3)", 11 === (a | 3));
// 比较运算符
console.log("true === (a < b)", true === (a < b));
console.log("true === (a <= b)", true === (a <= b));
// 等值运算符
console.log("false === (a == b)", false === (a == b));
console.log(" true === (a !== b)", true === (a !== b));
// 赋值运算符
a *= 10
console.log("100 === {a *= 10}", 100 === a);
a = 10;
a /= 5
console.log("2 === {a /= 5}", 2 === a);
a = 10;
// 二元逻辑运算符
console.log("20 === (a&&b)", 20 === (a && b));
console.log("10 === (a||b)", 10 === (a || b));
console.log("20 === (a >= 10 ? a + 10 : b + 10)", 20 === (a >= 10 ? a + 10 : b + 10))
console.log("20 === (a, b)", 20 === (a, b))

if (a <= b) {
  console.log("a <= b is true")
}

switch (a) {
  case '10':
    console.log('a is string 10');
    break
  case 10:
    console.log('a is number 10');
    break
  default:
    console.log("default");
}

for (var i = 0; i < 3; ++i) {
  console.log(i);
}

while (a <= 10) {
  console.log("~a++ =", a++);
}

do {
  console.log("a++ =", a++);
} while (a <= 13)

// --------------语法------------------
var o = {}; // 生成一个新的对象
b = {
  'string': 1, // object的key可以是字符串
  const_var: 2, //也可以是符合变量定义规则的标识符
  func: {} //value可以是任何类型
};
console.log("1===b['string']", 1 === b['string']);
console.log("2===b.const_var", 2 === b.const_var);
b['string']++;
b.const_var += 10;
console.log('"Object" === { k: "1", v: "2" }.constructor', "Object" === {
  k: "1",
  v: "2"
}.constructor)

function a(x) {
  return x;
}
var b = function(x) {
  return x;
}
var c = function(x) {
  return function() {
    return x;
  }
}
var d = c(100);
console.log(100 === b())

var e = function() {
  console.log(3 === arguments.length);
  console.log(100 === arguments[0]);
}
e(100, 200, 300);
var f = [];
g = [1, '2', {}, function() {}];
// --------------date------------------
console.log(getDate());
console.log(getDate(1500000000000));
console.log(getDate('2017-7-14'));
console.log(getDate(2017, 6, 14, 10, 40, 0, 0));


module.exports={
  date:getDate().toDateString()
}
